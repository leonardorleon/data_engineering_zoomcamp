id: 09_gcp_fhv_scheduled
namespace: de_zoomcamp
description: |
  Best to add a label `backfill:true` from the UI to track executions created via a backfill.
  CSV data used here comes from: https://github.com/DataTalksClub/nyc-tlc-data/releases/tag/fhv


# files look like fhv_tripdata_2019-01.csv.gz 

variables:
  file: "fhv_tripdata_{{trigger.date | date('yyyy-MM')}}.csv"
  gcs_file: "gs://{{kv('GCP_BUCKET_NAME')}}/{{vars.file}}"
  table: "{{kv('GCP_DATASET')}}.fhv_tripdata_{{trigger.date | date('yyyy_MM')}}"
  data: "{{outputs.extract.outputFiles['fhv' ~ '_tripdata_' ~ (trigger.date | date('yyyy-MM')) ~ '.csv']}}"

tasks:
  - id: set_label
    type: io.kestra.plugin.core.execution.Labels
    labels:
      file: "{{render(vars.file)}}"
      filename: "fhv"

# download links look like https://github.com/DataTalksClub/nyc-tlc-data/releases/download/fhv/fhv_tripdata_2019-01.csv.gz

  - id: extract
    type: io.kestra.plugin.scripts.shell.Commands
    outputFiles:
      - "*.csv"
    taskRunner:
      type: io.kestra.plugin.core.runner.Process
    commands:
      - wget -qO- https://github.com/DataTalksClub/nyc-tlc-data/releases/download/fhv/{{render(vars.file)}}.gz | gunzip > {{render(vars.file)}}

  - id: upload_to_gcs
    type: io.kestra.plugin.gcp.gcs.Upload
    from: "{{render(vars.data)}}"
    to: "{{render(vars.gcs_file)}}"

  - id: bq_fhv_tripdata
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE TABLE IF NOT EXISTS `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.fhv_tripdata`
      (
          unique_row_id BYTES OPTIONS (description = 'A unique identifier for the trip, generated by hashing key trip attributes.'),
          filename STRING OPTIONS (description = 'The source filename from which the trip data was loaded.'),      
          Dispatching_base_num STRING OPTIONS (description = 'The TLC Base License Number of the base that dispatched the trip'),
          Pickup_datetime TIMESTAMP OPTIONS (description = 'The date and time of the trip pick-up'),
          DropOff_datetime TIMESTAMP OPTIONS (description = 'The date and time of the trip dropoff'),
          PULocationID STRING OPTIONS (description = 'TLC Taxi Zone in which the trip began'),
          DOLocationID STRING OPTIONS (description = 'TLC Taxi Zone in which the trip ended'),
          SR_Flag INTEGER OPTIONS (description = 'Indicates if the trip was a part of a shared ride chain offered by a High Volume FHV company (e.g. Uber Pool, Lyft Line).'),
          Affiliated_base_number STRING OPTIONS (description = 'id of the affiliated base')
      )
      PARTITION BY DATE(Pickup_datetime);

  - id: bq_yellow_table_ext
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE OR REPLACE EXTERNAL TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`
      (
          Dispatching_base_num STRING OPTIONS (description = 'The TLC Base License Number of the base that dispatched the trip'),
          Pickup_datetime TIMESTAMP OPTIONS (description = 'The date and time of the trip pick-up'),
          DropOff_datetime TIMESTAMP OPTIONS (description = 'The date and time of the trip dropoff'),
          PULocationID STRING OPTIONS (description = 'TLC Taxi Zone in which the trip began'),
          DOLocationID STRING OPTIONS (description = 'TLC Taxi Zone in which the trip ended'),
          SR_Flag INTEGER OPTIONS (description = 'Indicates if the trip was a part of a shared ride chain offered by a High Volume FHV company (e.g. Uber Pool, Lyft Line).'),
          Affiliated_base_number STRING OPTIONS (description = 'id of the affiliated base')
      )
      OPTIONS (
          format = 'CSV',
          uris = ['{{render(vars.gcs_file)}}'],
          skip_leading_rows = 1,
          ignore_unknown_values = TRUE
      );

  - id: bq_fhv_table_tmp
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE OR REPLACE TABLE `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}`
      AS
      SELECT
        MD5(CONCAT(
          COALESCE(CAST(Dispatching_base_num AS STRING), ""),
          COALESCE(CAST(Pickup_datetime AS STRING), ""),
          COALESCE(CAST(DropOff_datetime AS STRING), ""),
          COALESCE(CAST(PULocationID AS STRING), ""),
          COALESCE(CAST(DOLocationID AS STRING), "")
        )) AS unique_row_id,
        "{{render(vars.file)}}" AS filename,
        *
      FROM `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}_ext`;

  - id: bq_fhv_merge
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      MERGE INTO `{{kv('GCP_PROJECT_ID')}}.{{kv('GCP_DATASET')}}.fhv_tripdata` T
      USING `{{kv('GCP_PROJECT_ID')}}.{{render(vars.table)}}` S
      ON T.unique_row_id = S.unique_row_id
      WHEN NOT MATCHED THEN
        INSERT (unique_row_id, filename, Dispatching_base_num, Pickup_datetime, DropOff_datetime, PULocationID, DOLocationID, SR_Flag, Affiliated_base_number)
        VALUES (S.unique_row_id, S.filename, S.Dispatching_base_num, S.Pickup_datetime, S.DropOff_datetime, S.PULocationID, S.DOLocationID, S.SR_Flag, S.Affiliated_base_number);

  - id: purge_files
    type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
    description: To avoid cluttering your storage, we will remove the downloaded files

pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{kv('GCP_CREDS')}}"
      projectId: "{{kv('GCP_PROJECT_ID')}}"
      location: "{{kv('GCP_LOCATION')}}"
      bucket: "{{kv('GCP_BUCKET_NAME')}}"

triggers:
  - id: fhv_schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "0 10 1 * *"

disabled: true
